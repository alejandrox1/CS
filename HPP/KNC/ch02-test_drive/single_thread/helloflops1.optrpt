Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.4.196 Build 20170411

Compiler options: -qopt-report=3 -O3 -o helloflops1

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(void)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(void)) [1] helloflops1.c(31,1)
  -> EXTERN: (38,5) printf(const char *__restrict__, ...)
  -> EXTERN: (45,5) printf(const char *__restrict__, ...)
  -> INLINE: (47,14) dtime()
    -> EXTERN: (77,5) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> INLINE: (55,13) dtime()
    -> EXTERN: (77,5) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (64,9) printf(const char *__restrict__, ...)
  -> EXTERN: (67,5) exit(int)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at helloflops1.c(39,5)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15467: unmasked aligned streaming stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 17 
   remark #15477: vector cost: 6.500 
   remark #15478: estimated potential speedup: 2.610 
   remark #15487: type converts: 6 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=262144
LOOP END

LOOP BEGIN at helloflops1.c(49,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at helloflops1.c(52,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 4.000 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=4
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

helloflops1.c(31,1):remark #34051: REGISTER ALLOCATION : [main] helloflops1.c:31

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rsi rdi zmm0-zmm12]
        
    Routine temporaries
        Total         :      87
            Global    :      18
            Local     :      69
        Regenerable   :      25
        Spilled       :       1
        
    Routine stack
        Variables     :      36 bytes*
            Reads     :       6 [2.00e+00 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dtime()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dtime()) [2] helloflops1.c(75,1)
  -> EXTERN: (77,5) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)


    Report from: Code generation optimizations [cg]

helloflops1.c(75,1):remark #34051: REGISTER ALLOCATION : [dtime] helloflops1.c:75

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      14
            Global    :       6
            Local     :       8
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       2 [2.00e+00 ~ 9.1%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
